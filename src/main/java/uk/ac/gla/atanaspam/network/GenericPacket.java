package uk.ac.gla.atanaspam.network;

import uk.ac.gla.atanaspam.pcapj.IPPacket;

import java.io.Serializable;
import java.net.InetAddress;
import java.util.Arrays;

/**
 * This class represents a packet wrapper for packets generated by pcapj
 * @author atanaspam
 * @version 0.1
 * @created 01/11/2015
 */
public class GenericPacket extends IPPacket implements Serializable{

    String type;
    protected int src_port;
    protected int dst_port;

    protected boolean[] flags;

    protected byte[] data;

    public int getSrc_port() {
        return src_port;
    }

    public int getDst_port() {
        return dst_port;
    }

    public boolean[] getFlags() {
        return flags;
    }

    public byte[] getData() {
        return data;
    }

    public String getType(){return type; }


    /**
     * A constructor to create a generic packet out of and IPPacket
     */
    public GenericPacket(long timestamp, String srcMAC, String destMAC, InetAddress srcIP, InetAddress dstIP) {

        super(timestamp, srcMAC, destMAC, srcIP, dstIP);
        this.type = "IPP";

    }

    /**
     * A constructor to create a generic packet out of and TCPPacket
     */
    public GenericPacket(long timestamp, String srcMAC, String destMAC, InetAddress srcIP, InetAddress dstIP, int src_port, int dst_port, boolean[] flags) {

        super(timestamp, srcMAC, destMAC, srcIP, dstIP);
        this.src_port = src_port;
        this.dst_port = dst_port;
        this.flags = flags;
        this.type = "TCP";

    }
    /**
     * A constructor to create a generic packet out of and UDPPacket
     */
    public GenericPacket(long timestamp, String srcMAC, String destMAC, InetAddress srcIP, InetAddress dstIP, int src_port, int dst_port) {

        super(timestamp, srcMAC, destMAC, srcIP, dstIP);
        this.src_port = src_port;
        this.dst_port = dst_port;
        this.type = "UDP";

    }

    /**
     * This method prints the corresponding information depending on the actual data within the packet
     * @return
     */
    public String toString(){
        if (type.equals("IPP")){
            return String.format(
                    "-----PACKET-----%nTimeStamp: %d%nSRC MAC: %s%nDST MAC: %s%nSRC IP: %s%nDEST IP: %s%n",
                    this.timestamp/1000, this.sourceMacAddress, this.destMacAddress, this.src_ip.getHostAddress(),
                    this.dst_ip.getHostAddress());
        }
        else if (type.equals("UDP")){
            return String.format(
                    "-----UDP PACKET-----%nTimeStamp: %d%nSRC MAC: %s%nDST MAC: %s%nSRC IP: %s%nDEST IP: %s%nSRC PORT: %d%n" +
                            "DEST PORT: %d%n",
                    this.timestamp/1000, this.sourceMacAddress, this.destMacAddress, this.src_ip.getHostAddress(),
                    this.dst_ip.getHostAddress(), this.src_port, this.dst_port);
        }
        else if (type.equals("TCP")){
            return String.format(
                    "-----TCP PACKET-----%nTimeStamp: %d%nSRC MAC: %s%nDST MAC: %s%nSRC IP: %s%nDEST IP: %s%nSRC PORT: %d%n" +
                            "DEST PORT: %d%nFLAGS: %s%n",
                    this.timestamp/1000, this.sourceMacAddress, this.destMacAddress, this.src_ip.getHostAddress(),
                    this.dst_ip.getHostAddress(), this.src_port, this.dst_port/*, this.seqNum, this.ackNum, this.data.length*/,
                    Arrays.toString(this.flags));
        }
        else return "Unknown packet";
    }



}